import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url'; // Added for __dirname
import * as DBSchema from '../src/db/schema.js'; // Added .js extension

// ESM-compatible __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Path where the generated Zod schemas will be written
const outputPath = path.join(__dirname, '../src/schemas/database.zod.ts'); // Output to src/schemas/

// Helper to convert table name to a more schema-friendly name (e.g., users -> User)
function getBaseName(tableName: string): string {
  if (tableName.endsWith('s')) {
    // Crude plural to singular for common cases, can be improved
    return tableName.charAt(0).toUpperCase() + tableName.slice(1, -1);
  }
  return tableName.charAt(0).toUpperCase() + tableName.slice(1);
}

async function generateZodSchemas() {
  console.log('Generating Zod schemas from Drizzle schema...');

  let outputContent = `// Generated by scripts/generate-zod.ts
// DO NOT EDIT MANUALLY - Changes will be overwritten

import { z } from 'zod';
import {
  // Import Drizzle table instances for schema generation
`;

  const tableImports: string[] = [];
  const schemaExports: string[] = [];

  for (const [key, tableInstance] of Object.entries(DBSchema)) {
    // Check if it's a Drizzle PgTable instance
    // Refined check to avoid instanceof issues in mixed module contexts
    if (tableInstance && typeof tableInstance === 'object' && tableInstance !== null &&
        (tableInstance as any)._ && typeof (tableInstance as any)._.name === 'string' &&
        Object.prototype.hasOwnProperty.call(tableInstance, Symbol.for('drizzle:tableConfig'))) {
      console.log(`Processing table: ${key}`);
      tableImports.push(key);
      const baseName = getBaseName(key);

      // Generate select schema
      // Note: createSelectSchema/createInsertSchema expect the actual table instance
      schemaExports.push(
        `export const ${baseName}SelectSchema = createSelectSchema(${key});`
      );
      // Generate insert schema
      schemaExports.push(
        `export const ${baseName}InsertSchema = createInsertSchema(${key});`
      );
      // Optionally, generate update schema
      // schemaExports.push(
      //   `export const ${baseName}UpdateSchema = createUpdateSchema(${key});`
      // );

    } else if (tableInstance && (tableInstance as any).enumName && Array.isArray((tableInstance as any).enumValues)) {
      // Handle Drizzle enums (like applicationStatusEnum)
      console.log(`Processing enum: ${key}`);
      tableImports.push(key);
      const baseName = getBaseName(key).replace(/Enum$/, ''); // Remove Enum suffix if present
      // Drizzle-zod can also create schemas for enums directly
      schemaExports.push(
        `export const ${baseName}EnumSchema = createSelectSchema(${key});`
      );
    }
  }

  // Add imports for table instances and drizzle-zod functions
  // For the generated file, it also needs to resolve to a .js file in ESM context
  outputContent += `  ${tableImports.join(',\n  ')}
} from '../../src/db/schema.js'; // Adjusted path and added .js extension

import { createSelectSchema, createInsertSchema } from 'drizzle-zod';

`;

  outputContent += schemaExports.join('\n\n');
  outputContent += '\n';

  // Ensure the output directory exists
  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  fs.writeFileSync(outputPath, outputContent);
  console.log(`Zod schemas generated successfully at ${outputPath}`);
}

generateZodSchemas().catch((error) => {
  console.error('Error generating Zod schemas:', error);
  process.exit(1);
}); 